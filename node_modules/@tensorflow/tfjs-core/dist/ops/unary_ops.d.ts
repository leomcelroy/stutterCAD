import { Tensor } from '../tensor';
import { TensorLike } from '../types';
declare function neg_<T extends Tensor>(x: T | TensorLike): T;
declare function ceil_<T extends Tensor>(x: T | TensorLike): T;
declare function floor_<T extends Tensor>(x: T | TensorLike): T;
declare function sign_<T extends Tensor>(x: T | TensorLike): T;
declare function round_<T extends Tensor>(x: T | TensorLike): T;
declare function exp_<T extends Tensor>(x: T | TensorLike): T;
declare function expm1_<T extends Tensor>(x: T | TensorLike): T;
declare function log_<T extends Tensor>(x: T | TensorLike): T;
declare function log1p_<T extends Tensor>(x: T | TensorLike): T;
declare function sqrt_<T extends Tensor>(x: T | TensorLike): T;
declare function rsqrt_<T extends Tensor>(x: T | TensorLike): T;
declare function square_<T extends Tensor>(x: T | TensorLike): T;
declare function reciprocal_<T extends Tensor>(x: T | TensorLike): T;
declare function abs_<T extends Tensor>(x: T | TensorLike): T;
declare function clipByValue_<T extends Tensor>(x: T | TensorLike, clipValueMin: number, clipValueMax: number): T;
declare function sigmoid_<T extends Tensor>(x: T | TensorLike): T;
declare function logSigmoid_<T extends Tensor>(x: T | TensorLike): T;
declare function softplus_<T extends Tensor>(x: T | TensorLike): T;
declare function sin_<T extends Tensor>(x: T | TensorLike): T;
declare function cos_<T extends Tensor>(x: T | TensorLike): T;
declare function tan_<T extends Tensor>(x: T | TensorLike): T;
declare function asin_<T extends Tensor>(x: T | TensorLike): T;
declare function acos_<T extends Tensor>(x: T | TensorLike): T;
declare function atan_<T extends Tensor>(x: T | TensorLike): T;
declare function sinh_<T extends Tensor>(x: T | TensorLike): T;
declare function cosh_<T extends Tensor>(x: T | TensorLike): T;
declare function tanh_<T extends Tensor>(x: T | TensorLike): T;
declare function asinh_<T extends Tensor>(x: T | TensorLike): T;
declare function acosh_<T extends Tensor>(x: T | TensorLike): T;
declare function atanh_<T extends Tensor>(x: T | TensorLike): T;
declare function erf_<T extends Tensor>(x: T | TensorLike): T;
declare function step_<T extends Tensor>(x: T | TensorLike, alpha?: number): T;
export declare const abs: typeof abs_;
export declare const acos: typeof acos_;
export declare const acosh: typeof acosh_;
export declare const asin: typeof asin_;
export declare const asinh: typeof asinh_;
export declare const atan: typeof atan_;
export declare const atanh: typeof atanh_;
export declare const ceil: typeof ceil_;
export declare const clipByValue: typeof clipByValue_;
export declare const cos: typeof cos_;
export declare const cosh: typeof cosh_;
export declare const erf: typeof erf_;
export declare const exp: typeof exp_;
export declare const expm1: typeof expm1_;
export declare const floor: typeof floor_;
export declare const log: typeof log_;
export declare const log1p: typeof log1p_;
export declare const logSigmoid: typeof logSigmoid_;
export declare const neg: typeof neg_;
export declare const reciprocal: typeof reciprocal_;
export declare const round: typeof round_;
export declare const rsqrt: typeof rsqrt_;
export declare const sigmoid: typeof sigmoid_;
export declare const sign: typeof sign_;
export declare const sin: typeof sin_;
export declare const sinh: typeof sinh_;
export declare const softplus: typeof softplus_;
export declare const sqrt: typeof sqrt_;
export declare const square: typeof square_;
export declare const step: typeof step_;
export declare const tan: typeof tan_;
export declare const tanh: typeof tanh_;
export {};
