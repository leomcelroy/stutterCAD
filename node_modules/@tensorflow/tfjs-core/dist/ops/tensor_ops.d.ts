import { Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, Tensor6D } from '../tensor';
import { TensorLike, TensorLike1D, TensorLike2D, TensorLike3D, TensorLike4D, TensorLike5D, TensorLike6D } from '../types';
import { DataType, Rank, ShapeMap } from '../types';
declare function tensor<R extends Rank>(values: TensorLike, shape?: ShapeMap[R], dtype?: DataType): Tensor<R>;
declare function scalar(value: number | boolean | [number, number], dtype?: DataType): Scalar;
declare function tensor1d(values: TensorLike1D, dtype?: DataType): Tensor1D;
declare function tensor2d(values: TensorLike2D, shape?: [number, number], dtype?: DataType): Tensor2D;
declare function tensor3d(values: TensorLike3D, shape?: [number, number, number], dtype?: DataType): Tensor3D;
declare function tensor4d(values: TensorLike4D, shape?: [number, number, number, number], dtype?: DataType): Tensor4D;
declare function tensor5d(values: TensorLike5D, shape?: [number, number, number, number, number], dtype?: DataType): Tensor5D;
declare function tensor6d(values: TensorLike6D, shape?: [number, number, number, number, number, number], dtype?: DataType): Tensor6D;
declare function ones<R extends Rank>(shape: ShapeMap[R], dtype?: DataType): Tensor<R>;
declare function zeros<R extends Rank>(shape: ShapeMap[R], dtype?: DataType): Tensor<R>;
declare function fill<R extends Rank>(shape: ShapeMap[R], value: number, dtype?: DataType): Tensor<R>;
declare function onesLike_<T extends Tensor>(x: T | TensorLike): T;
declare function zerosLike_<T extends Tensor>(x: T | TensorLike): T;
declare function linspace(start: number, stop: number, num: number): Tensor1D;
declare function range(start: number, stop: number, step?: number, dtype?: 'float32' | 'int32'): Tensor1D;
export { fill, linspace, ones, range, scalar, tensor, tensor1d, tensor2d, tensor3d, tensor4d, tensor5d, tensor6d, zeros };
export declare const onesLike: typeof onesLike_;
export declare const zerosLike: typeof zerosLike_;
